// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/question_model.dart';
import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2520004465619380910),
      name: 'QuestionModel',
      lastPropertyId: const obx_int.IdUid(7, 5673022627963383050),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1521570257435396038),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7211912006191683662),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 929759489659253243),
            name: 'A',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 625400545188035461),
            name: 'B',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5910976597725643981),
            name: 'C',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4499603110820030446),
            name: 'D',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5673022627963383050),
            name: 'answer',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1459953810931627801),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(3, 878065473708762313),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 596995106157677395),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7123992827496509814),
            name: 'score',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 878065473708762313),
            name: 'progress',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 1459953810931627801),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    QuestionModel: obx_int.EntityDefinition<QuestionModel>(
        model: _entities[0],
        toOneRelations: (QuestionModel object) => [],
        toManyRelations: (QuestionModel object) => {},
        getId: (QuestionModel object) => object.id,
        setId: (QuestionModel object, int id) {
          object.id = id;
        },
        objectToFB: (QuestionModel object, fb.Builder fbb) {
          final questionOffset = fbb.writeString(object.question);
          final AOffset = fbb.writeString(object.A);
          final BOffset = fbb.writeString(object.B);
          final COffset = fbb.writeString(object.C);
          final DOffset = fbb.writeString(object.D);
          final answerOffset = fbb.writeString(object.answer);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionOffset);
          fbb.addOffset(2, AOffset);
          fbb.addOffset(3, BOffset);
          fbb.addOffset(4, COffset);
          fbb.addOffset(5, DOffset);
          fbb.addOffset(6, answerOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final AParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final BParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final CParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final DParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final answerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = QuestionModel(
              question: questionParam,
              A: AParam,
              B: BParam,
              C: CParam,
              D: DParam,
              answer: answerParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.score);
          fbb.addInt64(2, object.progress);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final scoreParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final progressParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = User(score: scoreParam, progress: progressParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [QuestionModel] entity fields to define ObjectBox queries.
class QuestionModel_ {
  /// See [QuestionModel.id].
  static final id =
      obx.QueryIntegerProperty<QuestionModel>(_entities[0].properties[0]);

  /// See [QuestionModel.question].
  static final question =
      obx.QueryStringProperty<QuestionModel>(_entities[0].properties[1]);

  /// See [QuestionModel.A].
  static final A =
      obx.QueryStringProperty<QuestionModel>(_entities[0].properties[2]);

  /// See [QuestionModel.B].
  static final B =
      obx.QueryStringProperty<QuestionModel>(_entities[0].properties[3]);

  /// See [QuestionModel.C].
  static final C =
      obx.QueryStringProperty<QuestionModel>(_entities[0].properties[4]);

  /// See [QuestionModel.D].
  static final D =
      obx.QueryStringProperty<QuestionModel>(_entities[0].properties[5]);

  /// See [QuestionModel.answer].
  static final answer =
      obx.QueryStringProperty<QuestionModel>(_entities[0].properties[6]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// See [User.score].
  static final score =
      obx.QueryIntegerProperty<User>(_entities[1].properties[1]);

  /// See [User.progress].
  static final progress =
      obx.QueryIntegerProperty<User>(_entities[1].properties[2]);
}
